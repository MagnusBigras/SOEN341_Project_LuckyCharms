@page
@model Lucky_Charm_Event_track.Pages.EventFormModel
@{
    ViewData["Title"] = "EventForm";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>@ViewData["Title"] - Event Form</title>
    <link rel="stylesheet" href="~/css/EventForm.css">
</head>

<body>

    <form id="eventForm" class="event-form">
        <h2>Create New Event</h2>

        <div class="form-group">
            <label for="eventName">Event Name:</label>
            <input type="text" id="eventName" name="eventName" required>
        </div>

        <div class="form-group">
            <label for="eventDate">Date:</label>
            <input type="date" id="eventDate" name="eventDate" required>
        </div>

        <div class="form-group">
            <label for="eventTime">Time:</label>
            <input type="time" id="eventTime" name="eventTime" required>
        </div>

        <div class="form-group">
            <label for="eventLocation">Location:</label>
            <input type="text" id="eventLocation" name="eventLocation" required>
        </div>

        <div class="form-group">
            <label for="eventDescription">Description:</label>
            <textarea id="eventDescription" name="eventDescription" rows="5"></textarea>
        </div>

        <div class="form-group">
            <label for="eventType">Event Type:</label>
            <select id="eventType" name="eventType">
                <option value="meeting">Meeting</option>
                <option value="workshop">Workshop</option>
                <option value="conference">Conference</option>
                <option value="social">Social Gathering</option>
                <option value="other">Other</option>
            </select>
        </div>
        
        <div class="button-container">
            <button type="submit">Create Event</button>
            <a href="/" class="cancel-btn">
                <button type="button">Cancel Event</button>
            </a>
        </div>

        
    </form>

</body>

</html>
<script>
document.getElementById('eventForm').addEventListener('submit', async function (e) {
    e.preventDefault();

    const form = e.target;

    const payload = {
            eventName: form.eventName.value,
            eventDescription: form.eventDescription.value,
            startTime: `${form.eventDate.value}T${form.eventTime.value}`, // ISO format
            address: form.eventLocation.value,
            city: "Montreal", // or add a field
            region: "QC",
            postalCode: "Postal Code",
            country: "Canada",
            capacity: 100,
            eventOrganizerId: 1, // hardcoded or dynamic
            ticketType: 3,
            isActive: true,
            createdAt: new Date().toISOString(),
            updatedAt: new Date().toISOString()
    };

    try {
        const response = await fetch('/api/events/create', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(payload)
        });

        if (response.ok) {
            const result = await response.json();
            console.log("Event created:", result);
            window.location.href = "/EventConfirmation";
        } else {
            const error = await response.text();
            console.error("Failed to create event:", error);
            alert("Error creating event.");
        }
    } catch (err) {
        console.error("Network error:", err);
        alert("Network error. Please try again.");
    }
});
</script>
