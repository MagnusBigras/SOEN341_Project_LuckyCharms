// <auto-generated />
using System;
using Lucky_Charm_Event_track.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace LuckyCharmEventtrack.Migrations
{
    [DbContext(typeof(WebAppDBContext))]
    [Migration("20251024020542_AddTicketsTable")]
    partial class AddTicketsTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.0");

            modelBuilder.Entity("Lucky_Charm_Event_track.Models.Event", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Address")
                        .HasColumnType("TEXT");

                    b.Property<int>("Capacity")
                        .HasColumnType("INTEGER");

                    b.Property<string>("City")
                        .HasColumnType("TEXT");

                    b.Property<string>("Country")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventDescription")
                        .HasColumnType("TEXT");

                    b.Property<string>("EventName")
                        .HasColumnType("TEXT");

                    b.Property<int>("EventOrganizerId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PostalCode")
                        .HasColumnType("TEXT");

                    b.Property<string>("Region")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("TicketType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("isActive")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EventOrganizerId");

                    b.ToTable("Events");
                });

            modelBuilder.Entity("Lucky_Charm_Event_track.Models.EventOrganizer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<int>("UserAccountId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("UserAccountId")
                        .IsUnique();

                    b.ToTable("EventOrganizers");
                });

            modelBuilder.Entity("Lucky_Charm_Event_track.Models.Metric", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<int>("LastMonthAttendees")
                        .HasColumnType("INTEGER");

                    b.Property<double>("LastMonthRevenue")
                        .HasColumnType("REAL");

                    b.Property<int>("LastRemaining")
                        .HasColumnType("INTEGER");

                    b.Property<int>("NewAttendees")
                        .HasColumnType("INTEGER");

                    b.Property<int>("TotalCapacity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("TotalRevenue")
                        .HasColumnType("REAL");

                    b.Property<int>("UsedCapacity")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EventId")
                        .IsUnique();

                    b.ToTable("Metrics");
                });

            modelBuilder.Entity("Lucky_Charm_Event_track.Models.PriceTier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Label")
                        .HasColumnType("TEXT");

                    b.Property<int>("MaxQuantity")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<int>("TicketType")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("isAvailable")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.ToTable("PriceTiers");
                });

            modelBuilder.Entity("Lucky_Charm_Event_track.Models.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<bool>("CheckedIn")
                        .HasColumnType("INTEGER");

                    b.Property<int>("EventId")
                        .HasColumnType("INTEGER");

                    b.Property<double>("Price")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("QRCodeText")
                        .HasColumnType("TEXT");

                    b.Property<int>("TicketType")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("UserAccountId")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("EventId");

                    b.HasIndex("UserAccountId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Lucky_Charm_Event_track.Models.UserAccount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AccountCreationDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("AccountType")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("LastLogin")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<string>("Password")
                        .HasColumnType("TEXT");

                    b.Property<string>("PasswordSalt")
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserAccounts");
                });

            modelBuilder.Entity("Lucky_Charm_Event_track.Models.Event", b =>
                {
                    b.HasOne("Lucky_Charm_Event_track.Models.EventOrganizer", "Organizer")
                        .WithMany("Events")
                        .HasForeignKey("EventOrganizerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organizer");
                });

            modelBuilder.Entity("Lucky_Charm_Event_track.Models.EventOrganizer", b =>
                {
                    b.HasOne("Lucky_Charm_Event_track.Models.UserAccount", "Account")
                        .WithOne()
                        .HasForeignKey("Lucky_Charm_Event_track.Models.EventOrganizer", "UserAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Account");
                });

            modelBuilder.Entity("Lucky_Charm_Event_track.Models.Metric", b =>
                {
                    b.HasOne("Lucky_Charm_Event_track.Models.Event", "Event")
                        .WithOne("Metric")
                        .HasForeignKey("Lucky_Charm_Event_track.Models.Metric", "EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Lucky_Charm_Event_track.Models.PriceTier", b =>
                {
                    b.HasOne("Lucky_Charm_Event_track.Models.Event", "Event")
                        .WithMany("Prices")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Lucky_Charm_Event_track.Models.Ticket", b =>
                {
                    b.HasOne("Lucky_Charm_Event_track.Models.Event", "Event")
                        .WithMany("Tickets")
                        .HasForeignKey("EventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Lucky_Charm_Event_track.Models.UserAccount", "Account")
                        .WithMany("Tickets")
                        .HasForeignKey("UserAccountId");

                    b.Navigation("Account");

                    b.Navigation("Event");
                });

            modelBuilder.Entity("Lucky_Charm_Event_track.Models.Event", b =>
                {
                    b.Navigation("Metric");

                    b.Navigation("Prices");

                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("Lucky_Charm_Event_track.Models.EventOrganizer", b =>
                {
                    b.Navigation("Events");
                });

            modelBuilder.Entity("Lucky_Charm_Event_track.Models.UserAccount", b =>
                {
                    b.Navigation("Tickets");
                });
#pragma warning restore 612, 618
        }
    }
}
